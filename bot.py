# -*- coding: utf-8 -*-
import os
import asyncio
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        ["–ó–∞–∫–∞–∑–∞—Ç—å —ç–¥–∏—Ç", "–ö—É–ø–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"],
        ["–û—Ç–∑—ã–≤—ã", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ":
        await update.message.reply_text("–ú–æ–∏ —Ä–∞–±–æ—Ç—ã: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ]")
    elif text == "–ó–∞–∫–∞–∑–∞—Ç—å —ç–¥–∏—Ç":
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —ç–¥–∏—Ç –≤–∞–º –Ω—É–∂–µ–Ω:")
    elif text == "–ö—É–ø–∏—Ç—å –ø—Ä–æ–µ–∫—Ç":
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥]")
    elif text == "–û—Ç–∑—ã–≤—ã":
        await update.message.reply_text("–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã]")

async def run_bot():
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    try:
        if os.getenv("RENDER"):
            print("üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook")
            await application.bot.set_webhook(
                url=WEBHOOK_URL,
                secret_token=WEBHOOK_SECRET,
                drop_pending_updates=True
            )
            await application.run_webhook(
                listen="0.0.0.0",
                port=int(os.getenv("PORT", 10000)),
                webhook_url=WEBHOOK_URL,
                secret_token=WEBHOOK_SECRET
            )
        else:
            print("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
            await application.run_polling()
            
    except asyncio.CancelledError:
        print("üîå –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {type(e).__name__}: {e}")
    finally:
        if application.running:
            print("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            await application.stop()
            await application.shutdown()
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        print("\nüëã –†—É—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
