# -*- coding: utf-8 -*-
import os
import asyncio
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET")
WEBHOOK_URL = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"

async def check_secret_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤–µ–±—Ö—É–∫–∞"""
    if not WEBHOOK_SECRET:
        return True
        
    secret_header = update.effective_message.webhook_data.get('secret') if update.effective_message else None
    return secret_header == WEBHOOK_SECRET

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_secret_token(update, context):
        return
        
    buttons = [
        ["–ó–∞–∫–∞–∑–∞—Ç—å —ç–¥–∏—Ç", "–ö—É–ø–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"],
        ["–û—Ç–∑—ã–≤—ã", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_secret_token(update, context):
        return

    text = update.message.text
    if text == "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ":
        await update.message.reply_text("–ú–æ–∏ —Ä–∞–±–æ—Ç—ã: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ]")
    elif text == "–ó–∞–∫–∞–∑–∞—Ç—å —ç–¥–∏—Ç":
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —ç–¥–∏—Ç –≤–∞–º –Ω—É–∂–µ–Ω:")
    elif text == "–ö—É–ø–∏—Ç—å –ø—Ä–æ–µ–∫—Ç":
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥]")
    elif text == "–û—Ç–∑—ã–≤—ã":
        await update.message.reply_text("–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã]")

async def setup_webhook(app: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    await app.bot.set_webhook(
        url=WEBHOOK_URL,
        secret_token=WEBHOOK_SECRET,
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    try:
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        await application.initialize()
        
        if os.getenv("RENDER"):
            print("üåê –†–µ–∂–∏–º: Webhook")
            await setup_webhook(application)
            await application.run_webhook(
                listen="0.0.0.0",
                port=int(os.getenv("PORT", 10000)),
                secret_token=WEBHOOK_SECRET,
                webhook_url=WEBHOOK_URL
            )
        else:
            print("üîÑ –†–µ–∂–∏–º: Polling")
            await application.run_polling()
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
    finally:
        if application.running:
            print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            await application.stop()
            await application.shutdown()
        print("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == "__main__":
    asyncio.run(main())
