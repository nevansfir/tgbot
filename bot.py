# -*- coding: utf-8 -*-
import os
import asyncio
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from telegram.error import Conflict

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(TOKEN).build()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup([
    ["–ó–∞–∫–∞–∑–∞—Ç—å —ç–¥–∏—Ç", "–ö—É–ø–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"],
    ["–û—Ç–∑—ã–≤—ã", "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"]
], resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ":
        await update.message.reply_text("–ú–æ–∏ —Ä–∞–±–æ—Ç—ã: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ]")
    elif text == "–ó–∞–∫–∞–∑–∞—Ç—å —ç–¥–∏—Ç":
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —ç–¥–∏—Ç –≤–∞–º –Ω—É–∂–µ–Ω:")
    elif text == "–ö—É–ø–∏—Ç—å –ø—Ä–æ–µ–∫—Ç":
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥]")
    elif text == "–û—Ç–∑—ã–≤—ã":
        await update.message.reply_text("–û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ç–∑—ã–≤—ã]")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def run_bot():
    try:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        if os.getenv("RENDER") is None:
            print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
            await application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True
            )
        # –ù–∞ Render –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
        else:
            print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook...")
            await application.bot.set_webhook(
                url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook"
            )
            await application.run_webhook(
                listen="0.0.0.0",
                port=int(os.getenv("PORT", 10000)),
                webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook",
                secret_token=os.getenv("WEBHOOK_SECRET", "secret")
            )
    except Conflict:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ!")
    except Exception as e:
        print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(run_bot())
